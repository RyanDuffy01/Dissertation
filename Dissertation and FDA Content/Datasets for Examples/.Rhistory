lambda <- 10^log_lambda
fd_par_obj <- fdPar(basis,penalty,lambda)
smoothbasisobj <- smooth.basis(time_points,observations,fd_par_obj)
return(sum(smoothbasisobj$gcv))
}
optimised_function <- optimise(GCV_func,lower=0,upper=10,basis=basis_mortality_rates,observations=observation_matrix,time_points=Years,penalty=2)
minimum_log_lambda <- optimised_function$minimum
minimum_lambda <- 10^minimum_log_lambda
fd_par_obj <- fdPar(basis_mortality_rates,2,minimum_lambda)
sample_of_functions <- smooth.basis(Years,observation_matrix,fd_par_obj)$fd
sample_of_functions$fdnames$time <- Years
sample_of_functions$fdnames$values <- "Mortality Rate"
year_mesh <- seq(2001,2020,0.01)
eval_df <- as.data.frame(eval.fd(year_mesh,sample_of_functions)) %>%
mutate(Year=year_mesh)
eval_df_long <- pivot_longer(eval_df,names_to = "Country",values_to = "MortalityRate",cols=1:4)
par(mfrow=c(1,1))
# gives visualisation of sample of functions
ggplot(eval_df_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
geom_point(data=mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country),inherit.aes = FALSE,alpha=0.2)+
ylab("Age-standardised death rates per 100,000 people")
eval.fd(Years,sample_of_functions)
eval.fd(Years,sample_of_functions)-observation_matrix
as.vector(eval.fd(Years,sample_of_functions)-observation_matrix)
residuals_matrix <- eval.fd(Years,sample_of_functions)-observation_matrix
residuals_vector <- as.vector(residuals_matrix)
shapiro.test(residuals_vector)
residuals_matrix[,1]
residuals_England <- residuals_matrix[,1]
shapiro.test(residuals_England)
eval.fd(Years,sample_of_functions)-observation_matrix
shapiro.test(residuals_England)
shapiro.test(residuals_England)
shapiro.test(residuals_NI)
residuals_England <- residuals_matrix[,1]
residuals_NI <- residuals_matrix[,1]
residuals_Scotland <- residuals_matrix[,1]
residuals_Wales <- residuals_matrix[,1]
residuals_England <- residuals_matrix[,1]
residuals_NI <- residuals_matrix[,2]
residuals_Scotland <- residuals_matrix[,3]
residuals_Wales <- residuals_matrix[,4]
shapiro.test(residuals_England)
shapiro.test(residuals_NI)
shapiro.test(residuals_Scotland)
shapiro.test(residuals_Wales)
apply(residuals_matrix,sum)
apply(residuals_matrix,FUN=sum)
sapply(residuals_matrix,FUN=sum)
lapply(residuals_matrix,FUN=sum)
vapply(residuals_matrix,FUN=sum)
vapply(residuals_matrix,1,sum)
apply(residuals_matrix,1,sum)
apply(t(residuals_matrix),1,sum)
apply(t(residuals_matrix),1,shapiro.test)
f <- shapiro.test(residuals_England)
f$p.value
shap_test <- function(vector){
shapiro.test(vector)$p.value
}
shap_test <- function(vector){
shapiro.test(vector)$p.value
}
residuals_matrix <- eval.fd(Years,sample_of_functions)-observation_matrix
residuals_vector <- as.vector(residuals_matrix)
residuals_England <- residuals_matrix[,1]
residuals_NI <- residuals_matrix[,2]
residuals_Scotland <- residuals_matrix[,3]
residuals_Wales <- residuals_matrix[,4]
f <- shapiro.test(residuals_England)
shapiro.test(residuals_NI)
shapiro.test(residuals_Scotland)
shapiro.test(residuals_Wales)
apply(t(residuals_matrix),1,shap_test)
library(fda)
library(tidyverse)
setwd("~/Dissertation/Dissertation and FDA Content/Datasets for Examples")
#### Load Data ####
mortality_rates_wide <- read_csv("Alcohol Mortality Rates Per Country.csv", skip = 6)
mortality_rates_long <- pivot_longer(mortality_rates_wide,values_to="MortalityRate",cols=2:5,names_to = "Country")
ggplot(mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_point()+
ylab("Age-standardised death rates per 100,000 people")
Years <- unique(mortality_rates_long$Year)
basis_mortality_rates <- create.bspline.basis(range(Years),
breaks=Years,
norder=4)
observation_matrix <- data.matrix(mortality_rates_wide[,c(-1)])
GCV_func <- function(log_lambda,basis,observations,time_points,penalty){
lambda <- 10^log_lambda
fd_par_obj <- fdPar(basis,penalty,lambda)
smoothbasisobj <- smooth.basis(time_points,observations,fd_par_obj)
return(sum(smoothbasisobj$gcv))
}
optimised_function <- optimise(GCV_func,lower=0,upper=10,basis=basis_mortality_rates,observations=observation_matrix,time_points=Years,penalty=2)
minimum_log_lambda <- optimised_function$minimum
minimum_lambda <- 10^minimum_log_lambda
fd_par_obj <- fdPar(basis_mortality_rates,2,minimum_lambda)
sample_of_functions <- smooth.basis(Years,observation_matrix,fd_par_obj)$fd
sample_of_functions$fdnames$time <- Years
sample_of_functions$fdnames$values <- "Mortality Rate"
year_mesh <- seq(2001,2020,0.01)
eval_df <- as.data.frame(eval.fd(year_mesh,sample_of_functions,Lfdobj=1)) %>%
mutate(Year=year_mesh)
eval_df_long <- pivot_longer(eval_df,names_to = "Country",values_to = "MortalityRate",cols=1:4)
par(mfrow=c(1,1))
# gives visualisation of sample of functions
ggplot(eval_df_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
geom_point(data=mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country),inherit.aes = FALSE,alpha=0.2)+
ylab("Age-standardised death rates per 100,000 people")
library(fda)
library(tidyverse)
setwd("~/Dissertation/Dissertation and FDA Content/Datasets for Examples")
#### Load Data ####
mortality_rates_wide <- read_csv("Alcohol Mortality Rates Per Country.csv", skip = 6)
mortality_rates_long <- pivot_longer(mortality_rates_wide,values_to="MortalityRate",cols=2:5,names_to = "Country")
ggplot(mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_point()+
ylab("Age-standardised death rates per 100,000 people")
Years <- unique(mortality_rates_long$Year)
basis_mortality_rates <- create.bspline.basis(range(Years),
breaks=Years,
norder=4)
observation_matrix <- data.matrix(mortality_rates_wide[,c(-1)])
GCV_func <- function(log_lambda,basis,observations,time_points,penalty){
lambda <- 10^log_lambda
fd_par_obj <- fdPar(basis,penalty,lambda)
smoothbasisobj <- smooth.basis(time_points,observations,fd_par_obj)
return(sum(smoothbasisobj$gcv))
}
optimised_function <- optimise(GCV_func,lower=0,upper=10,basis=basis_mortality_rates,observations=observation_matrix,time_points=Years,penalty=2)
minimum_log_lambda <- optimised_function$minimum
minimum_lambda <- 10^minimum_log_lambda
fd_par_obj <- fdPar(basis_mortality_rates,2,minimum_lambda)
sample_of_functions <- smooth.basis(Years,observation_matrix,fd_par_obj)$fd
sample_of_functions$fdnames$time <- Years
sample_of_functions$fdnames$values <- "Mortality Rate"
year_mesh <- seq(2001,2020,0.01)
eval_df <- as.data.frame(eval.fd(year_mesh,sample_of_functions,Lfdobj=1)) %>%
mutate(Year=year_mesh)
eval_df_long <- pivot_longer(eval_df,names_to = "Country",values_to = "MortalityRate",cols=1:4)
par(mfrow=c(1,1))
# gives visualisation of sample of functions
ggplot(eval_df_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
#geom_point(data=mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country),inherit.aes = FALSE,alpha=0.2)+
ylab("Age-standardised death rates per 100,000 people")
principle_components_of_sample <- pca.fd(deriv.fd(sample_of_functions,Lfdobj = 1))
func_eval <- eval.fd(year_mesh,principle_components_of_sample$harmonics)
PC_DF <- data.frame(
Year = year_mesh,
PC_1 = func_eval[,1],
PC_2 = func_eval[,2]
)
ggplot(PC_DF,aes(x=Year,y=PC_1))+
geom_line() +
ylab("Principal Component Function 1")
ggplot(PC_DF,aes(x=Year,y=PC_2))+
geom_line()
scores_df <- data.frame(
PC_1 = principle_components_of_sample$scores[,1],
PC_2 = principle_components_of_sample$scores[,2],
Country=colnames(observation_matrix)
)
ggplot(scores_df,aes(x=PC_1,y=PC_2,label=Country))+
geom_point()+
geom_text(hjust = 0, nudge_x = 1)+
xlim(c(-25,45)) +
xlab("Score of Principle Component 1") +
ylab("Score of Principle Component 2")
ggplot(scores_df,aes(x=PC_1,y=PC_2,label=Country))+
geom_point()+
geom_text(hjust = 0, nudge_x = 1)+
#xlim(c(-25,45)) +
xlab("Score of Principle Component 1") +
ylab("Score of Principle Component 2")
ggplot(PC_DF,aes(x=Year,y=PC_1))+
geom_line() +
ylab("Principal Component Function 1")
ggplot(eval_df_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
#geom_point(data=mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country),inherit.aes = FALSE,alpha=0.2)+
ylab("Age-standardised death rates per 100,000 people")
ggplot(PC_DF,aes(x=Year,y=PC_1))+
geom_line() +
ylab("Principal Component Function 1")
ggplot(PC_DF,aes(x=Year,y=PC_2))+
geom_line()
eval_df <- as.data.frame(eval.fd(year_mesh,sample_of_functions)) %>%
mutate(Year=year_mesh)
eval_df_long <- pivot_longer(eval_df,names_to = "Country",values_to = "MortalityRate",cols=1:4)
par(mfrow=c(1,1))
ggplot(eval_df_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
#geom_point(data=mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country),inherit.aes = FALSE,alpha=0.2)+
ylab("Age-standardised death rates per 100,000 people")
shap_test <- function(vector){
shapiro.test(vector)$p.value
}
ggplot(eval_df_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
geom_point(data=mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country),inherit.aes = FALSE,alpha=0.2)+
ylab("Age-standardised death rates per 100,000 people")
shap_test <- function(vector){
shapiro.test(vector)$p.value
}
residuals_matrix <- eval.fd(Years,sample_of_functions)-observation_matrix
apply(t(residuals_matrix),1,shap_test)
#gives visualisation of the mean of this sample
plot(mean.fd(sample_of_functions),ylim=c(8,30),col="black",lwd=2)
lines(sample_of_functions)
#gives standard deviation of this sample
plot(sd.fd(sample_of_functions))
principle_components_of_sample <- pca.fd(deriv.fd(sample_of_functions,Lfdobj = 1))
principle_components_of_sample <- pca.fd(sample_of_functions)
func_eval <- eval.fd(year_mesh,principle_components_of_sample$harmonics)
PC_DF <- data.frame(
Year = year_mesh,
PC_1 = func_eval[,1],
PC_2 = func_eval[,2]
)
ggplot(PC_DF,aes(x=Year,y=PC_1))+
geom_line() +
ylab("Principal Component Function 1")
ggplot(PC_DF,aes(x=Year,y=PC_2))+
geom_line()
scores_df <- data.frame(
PC_1 = principle_components_of_sample$scores[,1],
PC_2 = principle_components_of_sample$scores[,2],
Country=colnames(observation_matrix)
)
ggplot(scores_df,aes(x=PC_1,y=PC_2,label=Country))+
geom_point()+
geom_text(hjust = 0, nudge_x = 1)+
#xlim(c(-25,45)) +
xlab("Score of Principle Component 1") +
ylab("Score of Principle Component 2")
ggplot(scores_df,aes(x=PC_1,y=PC_2,label=Country))+
geom_point()+
geom_text(hjust = 0, nudge_x = 1)+
xlim(c(-25,45)) +
xlab("Score of Principle Component 1") +
ylab("Score of Principle Component 2")
derivativs <- deriv.fd(sample_of_functions)
derivs <- deriv.fd(sample_of_functions)
principle_components_of_derivs <- pca.fd(derivs)
derivs <- deriv.fd(sample_of_functions)
eval_df_derivs <- as.data.frame(eval.fd(year_mesh,derivs)) %>%
mutate(Year=year_mesh)
eval_df_derivs_long <- pivot_longer(eval_deriv_df,names_to = "Country",values_to = "MortalityRate",cols=1:4)
eval_df_derivs_long <- pivot_longer(eval_df_derivs,names_to = "Country",values_to = "MortalityRate",cols=1:4)
ggplot(eval_df_derivs_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
geom_point(data=mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country),inherit.aes = FALSE,alpha=0.2)+
ylab("Age-standardised death rates per 100,000 people")
ggplot(eval_df_derivs_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
ylab("Age-standardised death rates per 100,000 people")
ggplot(eval_df_derivs_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
ylab("Change in Age-standardised death rates per 100,000 people")
derivs <- deriv.fd(sample_of_functions,Lfdobj = 2)
eval_df_derivs <- as.data.frame(eval.fd(year_mesh,derivs)) %>%
mutate(Year=year_mesh)
eval_df_derivs_long <- pivot_longer(eval_df_derivs,names_to = "Country",values_to = "MortalityRate",cols=1:4)
ggplot(eval_df_derivs_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
ylab("Change in Age-standardised death rates per 100,000 people")
principle_components_of_derivs <- pca.fd(derivs)
func_eval <- eval.fd(year_mesh,principle_components_of_sample$harmonics)
PC_DF <- data.frame(
Year = year_mesh,
PC_1 = func_eval[,1],
PC_2 = func_eval[,2]
)
ggplot(PC_DF,aes(x=Year,y=PC_1))+
geom_line() +
ylab("Principal Component Function 1")
func_eval_derivs <- eval.fd(year_mesh,principle_components_of_derivs$harmonics)
principle_components_of_derivs <- pca.fd(derivs)
func_eval_derivs <- eval.fd(year_mesh,principle_components_of_derivs$harmonics)
PC_DF_derivs <- data.frame(
Year = year_mesh,
PC_1 = func_eval_derivs[,1],
PC_2 = func_eval_derivs[,2]
)
ggplot(PC_DF_derivs,aes(x=Year,y=PC_1))+
geom_line() +
ylab("Principal Component Function 1")
ggplot(PC_DF_derivs,aes(x=Year,y=PC_2))+
geom_line()
scores_df <- data.frame(
PC_1 = principle_components_of_sample$scores[,1],
PC_2 = principle_components_of_sample$scores[,2],
Country=colnames(observation_matrix)
)
ggplot(scores_df,aes(x=PC_1,y=PC_2,label=Country))+
geom_point()+
geom_text(hjust = 0, nudge_x = 1)+
xlim(c(-25,45)) +
xlab("Score of Principle Component 1") +
ylab("Score of Principle Component 2")
ggplot(scores_df_derivs,aes(x=PC_1,y=PC_2,label=Country))+
geom_point()+
geom_text(hjust = 0, nudge_x = 1)+
xlim(c(-25,45)) +
xlab("Score of Principle Component 1") +
ylab("Score of Principle Component 2")
scores_df_derivs <- data.frame(
PC_1 = principle_components_of_sample$scores[,1],
PC_2 = principle_components_of_sample$scores[,2],
Country=colnames(observation_matrix)
)
ggplot(scores_df_derivs,aes(x=PC_1,y=PC_2,label=Country))+
geom_point()+
geom_text(hjust = 0, nudge_x = 1)+
xlim(c(-25,45)) +
xlab("Score of Principle Component 1") +
ylab("Score of Principle Component 2")
principle_components_of_derivs$varprop
gc()
scores_df_derivs <- data.frame(
PC_1 = principle_components_of_sample$scores[,1],
PC_2 = principle_components_of_sample$scores[,2],
Country=colnames(observation_matrix)
)
ggplot(scores_df_derivs,aes(x=PC_1,y=PC_2,label=Country))+
geom_point()+
geom_text(hjust = 0, nudge_x = 1)+
xlim(c(-25,45)) +
xlab("Score of Principle Component 1") +
ylab("Score of Principle Component 2")
library(fda)
library(tidyverse)
setwd("~/Dissertation/Dissertation and FDA Content/Datasets for Examples")
#### Load Data ####
mortality_rates_wide <- read_csv("Alcohol Mortality Rates Per Country.csv", skip = 6)
mortality_rates_long <- pivot_longer(mortality_rates_wide,values_to="MortalityRate",cols=2:5,names_to = "Country")
ggplot(mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_point()+
ylab("Age-standardised death rates per 100,000 people")
Years <- unique(mortality_rates_long$Year)
basis_mortality_rates <- create.bspline.basis(range(Years),
breaks=Years,
norder=4)
observation_matrix <- data.matrix(mortality_rates_wide[,c(-1)])
GCV_func <- function(log_lambda,basis,observations,time_points,penalty){
lambda <- 10^log_lambda
fd_par_obj <- fdPar(basis,penalty,lambda)
smoothbasisobj <- smooth.basis(time_points,observations,fd_par_obj)
return(sum(smoothbasisobj$gcv))
}
optimised_function <- optimise(GCV_func,lower=0,upper=10,basis=basis_mortality_rates,observations=observation_matrix,time_points=Years,penalty=2)
minimum_log_lambda <- optimised_function$minimum
minimum_lambda <- 10^minimum_log_lambda
fd_par_obj <- fdPar(basis_mortality_rates,2,minimum_lambda)
sample_of_functions <- smooth.basis(Years,observation_matrix,fd_par_obj)$fd
sample_of_functions$fdnames$time <- Years
sample_of_functions$fdnames$values <- "Mortality Rate"
year_mesh <- seq(2001,2020,0.01)
eval_df <- as.data.frame(eval.fd(year_mesh,sample_of_functions)) %>%
mutate(Year=year_mesh)
eval_df_long <- pivot_longer(eval_df,names_to = "Country",values_to = "MortalityRate",cols=1:4)
par(mfrow=c(1,1))
# gives visualisation of sample of functions
ggplot(eval_df_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
geom_point(data=mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country),inherit.aes = FALSE,alpha=0.2)+
ylab("Age-standardised death rates per 100,000 people")
#### Checking Residuals ####
shap_test <- function(vector){
shapiro.test(vector)$p.value
}
residuals_matrix <- eval.fd(Years,sample_of_functions)-observation_matrix
apply(t(residuals_matrix),1,shap_test)
#### Summary Functions ####
#gives visualisation of the mean of this sample
plot(mean.fd(sample_of_functions),ylim=c(8,30),col="black",lwd=2)
lines(sample_of_functions)
#gives standard deviation of this sample
plot(sd.fd(sample_of_functions))
#### fPCA of Data ####
principle_components_of_sample <- pca.fd(sample_of_functions)
func_eval <- eval.fd(year_mesh,principle_components_of_sample$harmonics)
PC_DF <- data.frame(
Year = year_mesh,
PC_1 = func_eval[,1],
PC_2 = func_eval[,2]
)
ggplot(PC_DF,aes(x=Year,y=PC_1))+
geom_line() +
ylab("Principal Component Function 1")
ggplot(PC_DF,aes(x=Year,y=PC_2))+
geom_line()
scores_df <- data.frame(
PC_1 = principle_components_of_sample$scores[,1],
PC_2 = principle_components_of_sample$scores[,2],
Country=colnames(observation_matrix)
)
ggplot(scores_df,aes(x=PC_1,y=PC_2,label=Country))+
geom_point()+
geom_text(hjust = 0, nudge_x = 1)+
xlim(c(-25,45)) +
xlab("Score of Principle Component 1") +
ylab("Score of Principle Component 2")
#### PC of Derivatives ####
derivs <- deriv.fd(sample_of_functions,Lfdobj = 2)
eval_df_derivs <- as.data.frame(eval.fd(year_mesh,derivs)) %>%
mutate(Year=year_mesh)
eval_df_derivs_long <- pivot_longer(eval_df_derivs,names_to = "Country",values_to = "MortalityRate",cols=1:4)
# gives visualisation of sample of functions
ggplot(eval_df_derivs_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
ylab("Change in Age-standardised death rates per 100,000 people")
principle_components_of_derivs <- pca.fd(derivs)
func_eval_derivs <- eval.fd(year_mesh,principle_components_of_derivs$harmonics)
PC_DF_derivs <- data.frame(
Year = year_mesh,
PC_1 = func_eval_derivs[,1],
PC_2 = func_eval_derivs[,2]
)
ggplot(PC_DF_derivs,aes(x=Year,y=PC_1))+
geom_line() +
ylab("Principal Component Function 1")
ggplot(PC_DF_derivs,aes(x=Year,y=PC_2))+
geom_line()
scores_df_derivs <- data.frame(
PC_1 = principle_components_of_sample$scores[,1],
PC_2 = principle_components_of_sample$scores[,2],
Country=colnames(observation_matrix)
)
ggplot(scores_df_derivs,aes(x=PC_1,y=PC_2,label=Country))+
geom_point()+
geom_text(hjust = 0, nudge_x = 1)+
xlim(c(-25,45)) +
xlab("Score of Principle Component 1") +
ylab("Score of Principle Component 2")
library(fda)
library(tidyverse)
setwd("~/Dissertation/Dissertation and FDA Content/Datasets for Examples")
#### Load Data ####
mortality_rates_wide <- read_csv("Alcohol Mortality Rates Per Country.csv", skip = 6)
mortality_rates_long <- pivot_longer(mortality_rates_wide,values_to="MortalityRate",cols=2:5,names_to = "Country")
ggplot(mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_point()+
ylab("Age-standardised death rates per 100,000 people")
Years <- unique(mortality_rates_long$Year)
basis_mortality_rates <- create.bspline.basis(range(Years),
breaks=Years,
norder=4)
observation_matrix <- data.matrix(mortality_rates_wide[,c(-1)])
GCV_func <- function(log_lambda,basis,observations,time_points,penalty){
lambda <- 10^log_lambda
fd_par_obj <- fdPar(basis,penalty,lambda)
smoothbasisobj <- smooth.basis(time_points,observations,fd_par_obj)
return(sum(smoothbasisobj$gcv))
}
optimised_function <- optimise(GCV_func,lower=0,upper=10,basis=basis_mortality_rates,observations=observation_matrix,time_points=Years,penalty=2)
minimum_log_lambda <- optimised_function$minimum
minimum_lambda <- 10^minimum_log_lambda
fd_par_obj <- fdPar(basis_mortality_rates,2,minimum_lambda)
sample_of_functions <- smooth.basis(Years,observation_matrix,fd_par_obj)$fd
sample_of_functions$fdnames$time <- Years
sample_of_functions$fdnames$values <- "Mortality Rate"
year_mesh <- seq(2001,2020,0.01)
eval_df <- as.data.frame(eval.fd(year_mesh,sample_of_functions)) %>%
mutate(Year=year_mesh)
eval_df_long <- pivot_longer(eval_df,names_to = "Country",values_to = "MortalityRate",cols=1:4)
par(mfrow=c(1,1))
# gives visualisation of sample of functions
ggplot(eval_df_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
geom_point(data=mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country),inherit.aes = FALSE,alpha=0.2)+
ylab("Age-standardised death rates per 100,000 people")
#### Checking Residuals ####
shap_test <- function(vector){
shapiro.test(vector)$p.value
}
residuals_matrix <- eval.fd(Years,sample_of_functions)-observation_matrix
apply(t(residuals_matrix),1,shap_test)
#### Summary Functions ####
#gives visualisation of the mean of this sample
plot(mean.fd(sample_of_functions),ylim=c(8,30),col="black",lwd=2)
lines(sample_of_functions)
#gives standard deviation of this sample
plot(sd.fd(sample_of_functions))
#### fPCA of Data ####
principle_components_of_sample <- pca.fd(sample_of_functions)
func_eval <- eval.fd(year_mesh,principle_components_of_sample$harmonics)
PC_DF <- data.frame(
Year = year_mesh,
PC_1 = func_eval[,1],
PC_2 = func_eval[,2]
)
ggplot(PC_DF,aes(x=Year,y=PC_1))+
geom_line() +
ylab("Principal Component Function 1")
ggplot(PC_DF,aes(x=Year,y=PC_2))+
geom_line()
scores_df <- data.frame(
PC_1 = principle_components_of_sample$scores[,1],
PC_2 = principle_components_of_sample$scores[,2],
Country=colnames(observation_matrix)
)
ggplot(scores_df,aes(x=PC_1,y=PC_2,label=Country))+
geom_point()+
geom_text(hjust = 0, nudge_x = 1)+
xlim(c(-25,45)) +
xlab("Score of Principle Component 1") +
ylab("Score of Principle Component 2")
