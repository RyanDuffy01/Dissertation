sd_plot_df <- data.frame(Year=year_mesh,stand_dev=eval.fd(sd_func,year_mesh))
ggplot(sd_plot_df,aes(x=Year,y=stand_dev)) +
geom_line() +
ylab("Standard Deviation in Curves")
var_func <- sd_func^2
var_plot_df <- data.frame(Year=year_mesh,var=eval.fd(var_func,year_mesh))
ggplot(var_plot_df,aes(x=Year,y=var)) +
geom_line() +
ylab("Variation in Curves")
var_Fd <- fda::var.fd(sample_of_functions)
smaller_year_mesh <- seq(2001,2020,0.1)
varfd_plot_df <- data.frame(
s=rep(smaller_year_mesh,length(smaller_year_mesh)),
t=rep(smaller_year_mesh,each=length(smaller_year_mesh)),
value=c(eval.bifd(smaller_year_mesh,smaller_year_mesh,var_Fd))
)
plotly::plot_ly(z = ~xtabs(value ~ s + t, data = varfd_plot_df)) %>% plotly::add_surface()
#### fPCA of Data ####
fPCA_samp <- pca.fd(sample_of_functions)
PCs <- fPCA_samp$harmonics
func_eval <- eval.fd(year_mesh,PCs)
fPCA_samp
PC_DF <- data.frame(
Year = year_mesh,
PC_1 = func_eval[,1],
PC_2 = func_eval[,2]
)
ggplot(PC_DF,aes(x=Year,y=PC_1))+
geom_line() +
ylab("Principal Component Function 1")+
ggtitle(paste0("PC 1 - Explains ", round(100*fPCA_samp$varprop[1]),"% Of Variation"))
ggplot(PC_DF,aes(x=Year,y=PC_2))+
geom_line() +
ylab("Principal Component Function 2")+
ggtitle(paste0("PC 2 - Explains ",round(100*fPCA_samp$varprop[2]),"% Of Variation"))
scores_df <- data.frame(
PC_1 = principle_components_of_sample$scores[,1],
PC_2 = principle_components_of_sample$scores[,2],
Country=colnames(observation_matrix)
)
library(fda)
library(tidyverse)
setwd("~/Dissertation/Dissertation and FDA Content/Datasets for Examples/Alcohol Example")
#### Load Data ####
mortality_rates_wide <- read_csv("Alcohol Mortality Rates Per Country.csv", skip = 6)
mortality_rates_long <- pivot_longer(mortality_rates_wide,values_to="MortalityRate",cols=2:5,names_to = "Country")
ggplot(mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_point()+
ylab("Age-standardised death rates per 100,000 people")
Years <- unique(mortality_rates_long$Year)
#### Function Fitting ####
basis_mortality_rates <- create.bspline.basis(range(Years),
breaks=Years,
norder=4)
observation_matrix <- data.matrix(mortality_rates_wide[,c(-1)])
GCV_func <- function(log_lambda,basis,observations,time_points,penalty){
lambda <- 10^log_lambda
fd_par_obj <- fdPar(basis,penalty,lambda)
smoothbasisobj <- smooth.basis(time_points,observations,fd_par_obj)
return(sum(smoothbasisobj$gcv))
}
optimised_function <- optimise(GCV_func,lower=0,upper=10,basis=basis_mortality_rates,observations=observation_matrix,time_points=Years,penalty=2)
minimum_log_lambda <- optimised_function$minimum
minimum_lambda <- 10^minimum_log_lambda
fd_par_obj <- fdPar(basis_mortality_rates,2,minimum_lambda)
sample_of_functions <- smooth.basis(Years,observation_matrix,fd_par_obj)$fd
sample_of_functions$fdnames$time <- "Years"
sample_of_functions$fdnames$values <- "Mortality Rate"
year_mesh <- seq(2001,2020,0.01)
eval_df <- as.data.frame(eval.fd(year_mesh,sample_of_functions)) %>%
mutate(Year=year_mesh)
eval_df_long <- pivot_longer(eval_df,names_to = "Country",values_to = "MortalityRate",cols=1:4)
# gives visualisation of sample of functions
ggplot(mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_point()+
ylab("Age-standardised death rates per 100,000 people")
ggplot(eval_df_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
geom_point(data=mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country),inherit.aes = FALSE,alpha=0.2)+
ylab("Age-standardised death rates per 100,000 people")
#### Checking Residuals ####
shap_test <- function(vector){
shapiro.test(vector)$p.value
}
residuals_matrix <- eval.fd(Years,sample_of_functions)-observation_matrix
residuals_df <- as.data.frame(residuals_matrix) %>%
mutate(Year=Years) %>%
pivot_longer(cols=1:4,names_to = "Country",values_to = "Residual")
apply(t(residuals_matrix),1,shap_test)
ggplot(residuals_df,aes(x=Year,y=Residual,col=Country))+
geom_point()
#### Summary Functions ####
#gives visualisation of the mean of this sample
mean_func <- mean.fd(sample_of_functions)
mean_plot_df <- data.frame(Year=year_mesh,mean=eval.fd(mean_func,year_mesh))
ggplot(eval_df_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
geom_point(data=mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country),inherit.aes = FALSE,alpha=0.2)+
geom_line(data=mean_plot_df,aes(x=Year,y=mean),inherit.aes = FALSE) +
ylab("Age-standardised death rates per 100,000 people")
#gives standard deviation of this sample
sd_func <- sd.fd(sample_of_functions)
sd_plot_df <- data.frame(Year=year_mesh,stand_dev=eval.fd(sd_func,year_mesh))
ggplot(sd_plot_df,aes(x=Year,y=stand_dev)) +
geom_line() +
ylab("Standard Deviation in Curves")
var_func <- sd_func^2
var_plot_df <- data.frame(Year=year_mesh,var=eval.fd(var_func,year_mesh))
ggplot(var_plot_df,aes(x=Year,y=var)) +
geom_line() +
ylab("Variation in Curves")
var_Fd <- fda::var.fd(sample_of_functions)
smaller_year_mesh <- seq(2001,2020,0.1)
varfd_plot_df <- data.frame(
s=rep(smaller_year_mesh,length(smaller_year_mesh)),
t=rep(smaller_year_mesh,each=length(smaller_year_mesh)),
value=c(eval.bifd(smaller_year_mesh,smaller_year_mesh,var_Fd))
)
plotly::plot_ly(z = ~xtabs(value ~ s + t, data = varfd_plot_df)) %>% plotly::add_surface()
#### fPCA of Data ####
fPCA_samp <- pca.fd(sample_of_functions)
PCs <- fPCA_samp$harmonics
func_eval <- eval.fd(year_mesh,PCs)
fPCA_samp
PC_DF <- data.frame(
Year = year_mesh,
PC_1 = func_eval[,1],
PC_2 = func_eval[,2]
)
ggplot(PC_DF,aes(x=Year,y=PC_1))+
geom_line() +
ylab("Principal Component Function 1")+
ggtitle(paste0("PC 1 - Explains ", round(100*fPCA_samp$varprop[1]),"% Of Variation"))
ggplot(PC_DF,aes(x=Year,y=PC_2))+
geom_line() +
ylab("Principal Component Function 2")+
ggtitle(paste0("PC 2 - Explains ",round(100*fPCA_samp$varprop[2]),"% Of Variation"))
scores_df <- data.frame(
PC_1 = fPCA_samp$scores[,1],
PC_2 = fPCA_samp$scores[,2],
Country=colnames(observation_matrix)
)
ggplot(scores_df,aes(x=PC_1,y=PC_2,label=Country))+
geom_point()+
geom_text(hjust = 0, nudge_x = 1)+
xlim(c(-25,45)) +
xlab("Score of Principle Component 1") +
ylab("Score of Principle Component 2")
#### Load in Unemployment Data ####
Scot_UnE <- read.csv("Scotland Unemployment.csv",skip=7) %>%
rename("Year"=Important.notes,"Unemployment_Rate"=X) %>%
filter(Year %in% Years) %>%
mutate(Year=as.numeric(Year)) %>%
mutate(Country="Scotland")
Eng_UnE <- read.csv("England Unemployment.csv",skip=7) %>%
rename("Year"=Important.notes,"Unemployment_Rate"=X) %>%
filter(Year %in% Years) %>%
mutate(Year=as.numeric(Year)) %>%
mutate(Country="England")
Wales_UnE <- read.csv("Wales Unemployment.csv",skip=7) %>%
rename("Year"=Important.notes,"Unemployment_Rate"=X) %>%
filter(Year %in% Years) %>%
mutate(Year=as.numeric(Year)) %>%
mutate(Country="Wales")
NI_UnE <- read.csv("Northern Ireland Unemployment.csv",skip=7) %>%
rename("Year"=Important.notes,"Unemployment_Rate"=X) %>%
filter(Year %in% Years) %>%
mutate(Year=as.numeric(Year)) %>%
mutate(Country="Northern Ireland")
All_Countries_UnE <- bind_rows(Scot_UnE,Eng_UnE,Wales_UnE,NI_UnE)
All_Countries_UnE_Wide <- pivot_wider(All_Countries_UnE,names_from = Country,values_from = Unemployment_Rate)
#### Function Fitting ####
Years_UnE <- unique(All_Countries_UnE$Year)
basis_UnE <- create.bspline.basis(range(Years_UnE),
breaks=Years_UnE,
norder=4)
observation_matrix_UnE <- data.matrix(All_Countries_UnE_Wide[,c(-1)])
optimised_function_UnE <- optimise(GCV_func,lower=0,upper=10,basis=basis_UnE,observations=observation_matrix_UnE,time_points=Years_UnE,penalty=2)
minimum_log_lambda_UnE <- optimised_function_UnE$minimum
minimum_lambda_UnE <- 10^minimum_log_lambda_UnE
fd_par_obj_UnE <- fdPar(basis_UnE,2,minimum_lambda_UnE)
sample_of_functions_UnE <- smooth.basis(Years_UnE,observation_matrix_UnE,fd_par_obj_UnE)$fd
sample_of_functions_UnE$fdnames$time <- "Years"
sample_of_functions_UnE$fdnames$values <- "Unemployment Rate"
eval_df_UnE <- as.data.frame(eval.fd(year_mesh,sample_of_functions_UnE)) %>%
mutate(Year=year_mesh)
eval_df_long_UnE <- pivot_longer(eval_df_UnE,names_to = "Country",values_to = "Unemployment_Rate",cols=1:4)
# gives visualisation of sample of functions
ggplot(All_Countries_UnE,aes(x=Year,y=Unemployment_Rate,col=Country))+
geom_point()+
ylab("Unemployment Rate %")
ggplot(eval_df_long_UnE,aes(x=Year,y=Unemployment_Rate,col=Country))+
geom_line()+
geom_point(data=All_Countries_UnE,aes(x=Year,y=Unemployment_Rate,col=Country),inherit.aes = FALSE,alpha=0.2)+
ylab("Unemployment Rate %")
#### Checking Residuals ####
shap_test <- function(vector){
shapiro.test(vector)$p.value
}
residuals_matrix <- eval.fd(Years_UnE,sample_of_functions_UnE)-observation_matrix_UnE
apply(t(residuals_matrix),1,shap_test)
principle_components_of_sample_UnE <- pca.fd(sample_of_functions_UnE)
func_eval_UnE <- eval.fd(year_mesh,principle_components_of_sample_UnE$harmonics)
PC_DF_UnE <- data.frame(
Year = year_mesh,
PC_1 = func_eval_UnE[,1],
PC_2 = func_eval_UnE[,2]
)
ggplot(PC_DF_UnE,aes(x=Year,y=PC_1))+
geom_line() +
ylab("Principal Component Function 1")+
ggtitle(paste0("PC 1 - Explains ",100*principle_components_of_sample_UnE$varprop[1],"% Of Variation"))
ggplot(PC_DF_UnE,aes(x=Year,y=PC_2))+
geom_line() +
ylab("Principal Component Function 2")+
ggtitle(paste0("PC 2 - Explains ",100*principle_components_of_sample_UnE$varprop[2],"% Of Variation"))
scores_df_UnE <- data.frame(
PC_1 = principle_components_of_sample_UnE$scores[,1],
PC_2 = principle_components_of_sample_UnE$scores[,2],
Country=colnames(observation_matrix_UnE)
)
ggplot(scores_df_UnE,aes(x=PC_1,y=PC_2,label=Country))+
geom_point()+
geom_text(hjust = 0, nudge_x = 0.08)+
xlim(c(-3,2))+
xlab("Score of Principle Component 1") +
ylab("Score of Principle Component 2")
Countries <- unique(mortality_rates_long$Country)
Constant <- list(constant=rep(1,length(Countries)))
Func_Covs <- list(Unemployment=sample_of_functions_UnE)
all_covs <- c(Constant,Func_Covs)
all_covs
with(sample_of_functions, fd(basisobj=basis_mortality_rates))
fd(basisobj=basis_mortality_rates)
beta_0 <- fd(basisobj=basis_mortality_rates,fdnames=Countries)
beta_0
with(sample_of_functions,fd(basisobj=basis_mortality_rates,fdnames=Countries))
beta1 <- fd(basisobj=basis_UnE,fdnames=Countries)
beta_0 <- list(constant=fd(basisobj=basis_mortality_rates,fdnames=Countries))
beta1 <- list(Unemployment=fd(basisobj=basis_UnE,fdnames=Countries))
Countries <- unique(mortality_rates_long$Country)
Constant <- list(constant=rep(1,length(Countries)))
Func_Covs <- list(Unemployment=sample_of_functions_UnE)
all_covs <- c(Constant,Func_Covs)
beta_0 <- list(constant=fd(basisobj=basis_mortality_rates,fdnames=Countries))
beta_1 <- list(Unemployment=fd(basisobj=basis_UnE,fdnames=Countries))
all_beta <-c(beta_0,beta_1)
fda::fRegress(sample_of_functions,all_covs,all_beta)
plot.fd(regression)
regression <- fRegress(sample_of_functions,all_covs,all_beta)
plot.fd(regression$yfdobj)
plot.fd(regression$betaestlist)
plot.fd(regression$betaestlist$Unemployment)
plot.fd(regression$betaestlist$Unemployment$fd)
regression$betaestlist$Unemployment$fd
plot.fd(regression$betaestlist$Unemployment$fd)
regression$betaestlist$Unemployment$fd
regression$yfdobj$fdnames
Beta_1_est <- regression$betaestlist$Unemployment$fd
Beta_1_est <- regression$betaestlist$Unemployment$fd
Beta_1_est$fdnames <- list(time="Years",reps=Beta_1_est$fdnames,values="Mortality Rate")
plot(Beta_1_est)
Countries <- unique(mortality_rates_long$Country)
Constant <- list(constant=rep(1,length(Countries)))
Func_Covs <- list(Unemployment=sample_of_functions_UnE)
all_covs <- c(Func_Covs)
beta_0 <- list(constant=fd(basisobj=basis_mortality_rates,fdnames=Countries))
beta_1 <- list(Unemployment=fd(basisobj=basis_UnE,fdnames=Countries))
all_beta <-c(beta_1)
regression <- fRegress(sample_of_functions,all_covs,all_beta)
Beta_1_est <- regression$betaestlist$Unemployment$fd
Beta_1_est$fdnames <- list(time="Years",reps=Beta_1_est$fdnames,values="Mortality Rate")
plot(Beta_1_est)
Countries <- unique(mortality_rates_long$Country)
Constant <- list(constant=rep(1,length(Countries)))
Func_Covs <- list(Unemployment=sample_of_functions_UnE)
all_covs <- c(Func_Covs)
beta_0 <- list(constant=fd(basisobj=basis_mortality_rates,fdnames=Countries))
beta_1 <- list(Unemployment=fd(basisobj=basis_UnE,fdnames=Countries))
all_beta <-c(beta_1)
regression <- fRegress(sample_of_functions,all_covs,all_beta)
Beta_1_est <- regression$betaestlist$Unemployment$fd
Beta_1_est$fdnames <- list(time="Years",reps=Beta_1_est$fdnames,values="Mortality Rate")
list_covariate <- list(rep(1,length(Countries)),sample_of_functions_UnE)
beta_fdPar <- fdPar(basis_mortality_rates,2)
beta_list <- list(beta_fdPar,beta_fdPar)
functional_regression <- fRegress(sample_of_functions,list_covariate,beta_list)
plot.fd(functional_regression$yhatfdobj)
Beta_1_eval <- eval.fd(year_mesh,Beta_1_est)
Beta_1_eval
Beta_1_eval[,1]
Beta_1_est_plot_df <- data.frame(
Year=year_mesh,
Beta1=Beta_1_eval[,1]
)
ggplot(Beta_1_est_plot_df,aes(x=Year,y=Beta1))+
geom_line()
Beta_1_eval <- eval.fd(year_mesh,yfdobj)
regress_ests <- regression$yfdobj
Beta_1_eval <- eval.fd(year_mesh,regress_ests)
regress_ests_eval <- eval.fd(year_mesh,regress_ests)
regress_ests_eval_plot_df <- as.data.frame(regress_ests_eval)
regress_ests_eval_plot_df
regress_ests_eval_plot_df <- as.data.frame(regress_ests_eval) %>%
pivot_longer(cols=1:4,names_to = "Country",values_to = "Regression Estimates")
regress_ests_eval_plot_df <- as.data.frame(regress_ests_eval) %>%
mutate(Year=year_mesh) %>%
pivot_longer(cols=1:4,names_to = "Country",values_to = "Regression Estimates") %>%
ggplot(Beta_1_est_plot_df,aes(x=Year,y=Beta1))+
geom_line()
regress_ests_eval_plot_df <- as.data.frame(regress_ests_eval) %>%
mutate(Year=year_mesh) %>%
pivot_longer(cols=1:4,names_to = "Country",values_to = "Regression Estimates")
regress_ests_eval_plot_df
ggplot(Beta_1_est_plot_df,aes(x=Year,y=`Regression Estimates`))+
geom_line()
ggplot(regress_ests_eval_plot_df,aes(x=Year,y=`Regression Estimates`))+
geom_line()
ggplot(regress_ests_eval_plot_df,aes(x=Year,y=`Regression Estimates`,col=Country))+
geom_line()
Countries <- unique(mortality_rates_long$Country)
Constant <- list(constant=rep(1,length(Countries)))
Func_Covs <- list(Unemployment=sample_of_functions_UnE)
all_covs <- c(Func_Covs)
beta_0 <- list(constant=fd(basisobj=basis_mortality_rates,fdnames=Countries))
beta_1 <- list(Unemployment=fd(basisobj=basis_UnE,fdnames=Countries))
all_beta <-c(beta_1)
regression <- fRegress(sample_of_functions,all_covs,all_beta)
Beta_1_est <- regression$betaestlist$Unemployment$fd
Beta_1_est$fdnames <- list(time="Years",reps=Beta_1_est$fdnames,values="Mortality Rate")
Beta_1_eval <- eval.fd(year_mesh,Beta_1_est)
Beta_1_est_plot_df <- data.frame(
Year=year_mesh,
Beta1=Beta_1_eval[,1]
)
ggplot(Beta_1_est_plot_df,aes(x=Year,y=Beta1))+
geom_line()
Countries <- unique(mortality_rates_long$Country)
Constant <- list(constant=rep(1,length(Countries)))
Func_Covs <- list(Unemployment=sample_of_functions_UnE)
all_covs <- c(Func_Covs)
beta_0 <- list(constant=fd(basisobj=basis_mortality_rates,fdnames=Countries))
beta_1 <- list(Unemployment=fd(basisobj=basis_UnE,fdnames=Countries))
all_beta <-c(beta_1)
regression <- fRegress(sample_of_functions,all_covs,all_beta)
Beta_1_est <- regression$betaestlist$Unemployment$fd
Beta_1_est$fdnames <- list(time="Years",reps=Beta_1_est$fdnames,values="Mortality Rate")
Beta_1_eval <- eval.fd(year_mesh,Beta_1_est)
Beta_1_est_plot_df <- data.frame(
Year=year_mesh,
Beta1=Beta_1_eval[,1]
)
ggplot(Beta_1_est_plot_df,aes(x=Year,y=Beta1))+
geom_line()
regress_ests <- regression$yfdobj
regress_ests_eval <- eval.fd(year_mesh,regress_ests)
regress_ests_eval_plot_df <- as.data.frame(regress_ests_eval) %>%
mutate(Year=year_mesh) %>%
pivot_longer(cols=1:4,names_to = "Country",values_to = "Regression Estimates")
ggplot(regress_ests_eval_plot_df,aes(x=Year,y=`Regression Estimates`,col=Country))+
geom_line()
ggplot(regress_ests_eval_plot_df,aes(x=Year,y=`Regression Estimates`,col=Country))+
geom_line(data=eval_df_long,aes(x=Year,y=MortalityRate,col=Country),alpha=0.1)+
geom_line()
ggplot(regress_ests_eval_plot_df,aes(x=Year,y=`Regression Estimates`,col=Country))+
geom_line()+
geom_line(data=eval_df_long,aes(x=Year,y=MortalityRate,col=Country),alpha=0.1)
ggplot(regress_ests_eval_plot_df,aes(x=Year,y=`Regression Estimates`,col=Country))+
geom_line()+
geom_line(data=eval_df_long,aes(x=Year,y=MortalityRate,col=Country))
ggplot(regress_ests_eval_plot_df,aes(x=Year,y=`Regression Estimates`,col=Country))+
geom_line()
+
geom_line(data=eval_df_long,aes(x=Year,y=MortalityRate,col=Country))
ggplot(regress_ests_eval_plot_df,aes(x=Year,y=`Regression Estimates`,col=Country))+
geom_line()+
geom_line(data=eval_df_long,aes(x=Year,y=MortalityRate,col=Country))
ggplot(eval_df_long,aes(x=Year,y=MortalityRate,col=Country))+
geom_line()+
geom_point(data=mortality_rates_long,aes(x=Year,y=MortalityRate,col=Country),inherit.aes = FALSE,alpha=0.2)+
ylab("Age-standardised death rates per 100,000 people")
ggplot(regress_ests_eval_plot_df,aes(x=Year,y=`Regression Estimates`,col=Country))+
geom_line()+
geom_line(data=eval_df_long,aes(x=Year,y=MortalityRate,col=Country))
regress_ests <- regression$yhatfdobj
regress_ests_eval <- eval.fd(year_mesh,regress_ests)
regress_ests_eval_plot_df <- as.data.frame(regress_ests_eval) %>%
mutate(Year=year_mesh) %>%
pivot_longer(cols=1:4,names_to = "Country",values_to = "Regression Estimates")
ggplot(regress_ests_eval_plot_df,aes(x=Year,y=`Regression Estimates`,col=Country))+
geom_line()+
geom_line(data=eval_df_long,aes(x=Year,y=MortalityRate,col=Country))
ggplot(regress_ests_eval_plot_df,aes(x=Year,y=`Regression Estimates`,col=Country))+
geom_line()+
geom_line(data=eval_df_long,aes(x=Year,y=MortalityRate,col=Country),alpha=0.1)
ggplot(regress_ests_eval_plot_df,aes(x=Year,y=`Regression Estimates`,col=Country))+
geom_line()+
geom_line(data=eval_df_long,aes(x=Year,y=MortalityRate,col=Country),alpha=0.5)
ggplot(regress_ests_eval_plot_df,aes(x=Year,y=`Regression Estimates`,col=Country))+
geom_line()+
geom_line(data=eval_df_long,aes(x=Year,y=MortalityRate,col=Country),alpha=0.2)
SSE0 <- sample_of_functions-regress_ests
SSE0
resid_funcs <- sample_of_functions-regress_ests
resid_func_eval <- eval.fd(year_mesh,resid_funcs)
resid_func_eval
resid_func_squared_eval <- resid_func_eval^2
SSE0_eval <- rowSums(resid_func_squared_eval)
SSE0_eval
mean_fit_resids <- resid_funcs-mean_func
mean_fit_resids <- sample_of_functions-mean_func
mean_func$coefs
length(colnames(sample_of_functions$coefs))
matrix(mean_func$coefs)
resid_funcs <- sample_of_functions-regress_ests
resid_func_eval <- eval.fd(year_mesh,resid_funcs)
resid_func_squared_eval <- resid_func_eval^2
SSE0_eval <- rowSums(resid_func_squared_eval)
new_mean_func_coeffs <- matrix(1,length(colnames(sample_of_functions$coefs)),length(sample_of_functions$coefs))
matrix(1,length(colnames(sample_of_functions$coefs)),length(sample_of_functions$coefs))
new_mean_func_coeffs <- matrix(1,length(sample_of_functions$coefs),length(colnames(sample_of_functions$coefs)))
resid_funcs <- sample_of_functions-regress_ests
resid_func_eval <- eval.fd(year_mesh,resid_funcs)
resid_func_squared_eval <- resid_func_eval^2
SSE0_eval <- rowSums(resid_func_squared_eval)
new_mean_func_coeffs <- matrix(1,length(sample_of_functions$coefs),length(colnames(sample_of_functions$coefs)))
for (i in 1:length(colnames(sample_of_functions$coefs))){
new_coefs <- mean_func$coefs
colnames(new_coefs) <- colnames(sample_of_functions$coefs)[i]
new_mean_func_coeffs[,i] <-- new_coefs
}
new_mean_func_coeffs
colnames(sample_of_functions$coefs)[i]
for (i in 1:length(colnames(sample_of_functions$coefs))){
new_coefs <- mean_func$coefs
colnames(new_coefs) <- colnames(sample_of_functions$coefs)[i]
new_mean_func_coeffs[,i] <- new_coefs
}
for (i in 1:length(colnames(sample_of_functions$coefs))){
new_coefs <- mean_func$coefs
new_mean_func_coeffs[,i] <- new_coefs
colnames(new_mean_func_coeffs)[i] <- colnames(sample_of_functions$coefs)[i]
}
colnames(new_mean_func_coeffs)[i]
colnames(sample_of_functions$coefs)[i]
new_mean_func_coeffs <- matrix(1,length(sample_of_functions$coefs),length(colnames(sample_of_functions$coefs)))
for (i in 1:length(colnames(sample_of_functions$coefs))){
new_coefs <- mean_func$coefs
new_mean_func_coeffs[,i] <- new_coefs
colnames(new_mean_func_coeffs)[i] <- colnames(sample_of_functions$coefs)[i]
}
new_mean_func_coeffs <- matrix(1,length(sample_of_functions$coefs),length(colnames(sample_of_functions$coefs)))
for (i in 1:length(colnames(sample_of_functions$coefs))){
new_coefs <- mean_func$coefs
new_mean_func_coeffs[,i] <- new_coefs
#colnames(new_mean_func_coeffs)[i] <- colnames(sample_of_functions$coefs)[i]
}
new_mean_func_coeffs <- matrix(1,length(sample_of_functions$coefs),length(colnames(sample_of_functions$coefs)))
for (i in 1:length(colnames(sample_of_functions$coefs))){
new_coefs <- mean_func$coefs
new_mean_func_coeffs[,i] <- new_coefs
}
colnames(new_mean_func_coeffs) <- colnames(sample_of_functions$coefs)
new_mean_func <- fd(coeffs=new_mean_func_coeffs,basis=mean_func$basis)
new_mean_func <- fd(coeff=new_mean_func_coeffs,basis=mean_func$basis)
new_mean_func <- fd(coef=new_mean_func_coeffs,basis=mean_func$basis)
mean_func$basis
new_mean_func_coeffs
fd(coef=new_mean_func_coeffs,basis=mean_func$basis)
mean_func$basis
mean_func$coefs
new_mean_func_coeffs <- matrix(1,length(mean_func$coefs[,1]),length(colnames(sample_of_functions$coefs)))
for (i in 1:length(colnames(sample_of_functions$coefs))){
new_coefs <- mean_func$coefs
new_mean_func_coeffs[,i] <- new_coefs
}
colnames(new_mean_func_coeffs) <- colnames(sample_of_functions$coefs)
new_mean_func <- fd(coef=new_mean_func_coeffs,basis=mean_func$basis)
new_mean_func
mean_fit_resids <- sample_of_functions-mean_func
sample_of_functions
mean_func
mean_fit_resids <- sample_of_functions-mean_func
mean_fit_resids <- sample_of_functions-new_mean_func
mean_fit_resids_eval <- eval.fd(year_mesh,mean_fit_resids)
SSE1_eval <- rowSums(mean_fit_resids_eval_squared)
mean_fit_resids_eval_squared <- mean_fit_resids_eval^2
SSE1_eval <- rowSums(mean_fit_resids_eval_squared)
ggplot(regress_ests_eval_plot_df,aes(x=Year,y=`Regression Estimates`,col=Country))+
geom_line()+
geom_line(data=eval_df_long,aes(x=Year,y=MortalityRate,col=Country),alpha=0.2)
resid_funcs <- sample_of_functions-regress_ests
resid_func_eval <- eval.fd(year_mesh,resid_funcs)
resid_func_squared_eval <- resid_func_eval^2
SSE0_eval <- rowSums(resid_func_squared_eval)
new_mean_func_coeffs <- matrix(1,length(mean_func$coefs[,1]),length(colnames(sample_of_functions$coefs)))
for (i in 1:length(colnames(sample_of_functions$coefs))){
new_coefs <- mean_func$coefs
new_mean_func_coeffs[,i] <- new_coefs
}
colnames(new_mean_func_coeffs) <- colnames(sample_of_functions$coefs)
new_mean_func <- fd(coef=new_mean_func_coeffs,basis=mean_func$basis)
mean_fit_resids <- sample_of_functions-new_mean_func
mean_fit_resids_eval <- eval.fd(year_mesh,mean_fit_resids)
mean_fit_resids_eval_squared <- mean_fit_resids_eval^2
SSE1_eval <- rowSums(mean_fit_resids_eval_squared)
RSQR <- (SSE0_eval-SSE1_eval)/SSE0_eval
ggplot(data.frame(Year=year_mesh,RSQR=RSQR),aes(x=Year,Y=RSQR))+
geom_line()
RSQR <- (SSE0_eval-SSE1_eval)/SSE0_eval
ggplot(data.frame(Year=year_mesh,RSQR=RSQR),aes(x=Year,y=RSQR))+
geom_line()
